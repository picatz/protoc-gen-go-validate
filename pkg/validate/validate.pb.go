// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.1
// source: validate/validate.proto

package validate

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Field defines validation behavior for specific message field types.
type FieldRules struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//	*FieldRules_String_
	//	*FieldRules_Bytes
	//	*FieldRules_Uint32
	//	*FieldRules_Uint64
	//	*FieldRules_Int32
	//	*FieldRules_Int64
	//	*FieldRules_Float
	//	*FieldRules_Double
	Type isFieldRules_Type `protobuf_oneof:"type"`
}

func (x *FieldRules) Reset() {
	*x = FieldRules{}
	if protoimpl.UnsafeEnabled {
		mi := &file_validate_validate_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldRules) ProtoMessage() {}

func (x *FieldRules) ProtoReflect() protoreflect.Message {
	mi := &file_validate_validate_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldRules.ProtoReflect.Descriptor instead.
func (*FieldRules) Descriptor() ([]byte, []int) {
	return file_validate_validate_proto_rawDescGZIP(), []int{0}
}

func (m *FieldRules) GetType() isFieldRules_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *FieldRules) GetString_() *StringRules {
	if x, ok := x.GetType().(*FieldRules_String_); ok {
		return x.String_
	}
	return nil
}

func (x *FieldRules) GetBytes() *BytesRules {
	if x, ok := x.GetType().(*FieldRules_Bytes); ok {
		return x.Bytes
	}
	return nil
}

func (x *FieldRules) GetUint32() *UInt32Rules {
	if x, ok := x.GetType().(*FieldRules_Uint32); ok {
		return x.Uint32
	}
	return nil
}

func (x *FieldRules) GetUint64() *UInt64Rules {
	if x, ok := x.GetType().(*FieldRules_Uint64); ok {
		return x.Uint64
	}
	return nil
}

func (x *FieldRules) GetInt32() *Int32Rules {
	if x, ok := x.GetType().(*FieldRules_Int32); ok {
		return x.Int32
	}
	return nil
}

func (x *FieldRules) GetInt64() *Int64Rules {
	if x, ok := x.GetType().(*FieldRules_Int64); ok {
		return x.Int64
	}
	return nil
}

func (x *FieldRules) GetFloat() *FloatRules {
	if x, ok := x.GetType().(*FieldRules_Float); ok {
		return x.Float
	}
	return nil
}

func (x *FieldRules) GetDouble() *DoubleRules {
	if x, ok := x.GetType().(*FieldRules_Double); ok {
		return x.Double
	}
	return nil
}

type isFieldRules_Type interface {
	isFieldRules_Type()
}

type FieldRules_String_ struct {
	// Define validation rules for message fields of type `string`.
	//
	//   ```protobuf
	//   message CreateUserRequest {
	//     string name = 1 [(validate.field).string = {
	//       min: 1,
	//       max: 255,
	//       allow_space: false,
	//       ascii_only: true,
	//     }];
	//     string password = 2 [(validate.field).string = {
	//       min: 8,
	//       max: 255,
	//     }];
	//   }
	//   ```
	String_ *StringRules `protobuf:"bytes,1,opt,name=string,proto3,oneof"`
}

type FieldRules_Bytes struct {
	// Define validation rules for message fields of type `bytes`.
	//
	//   ```protobuf
	//   message UploadBlobRequest {
	//     bytes blob = 1 [(validate.field).bytes = {
	//       min: 1,
	//       max: 1024,
	//     }];
	//   }
	//   ```
	Bytes *BytesRules `protobuf:"bytes,2,opt,name=bytes,proto3,oneof"`
}

type FieldRules_Uint32 struct {
	// Define validation rules for message fields of type `uint32`.
	//
	//   ```protobuf
	//   message AddPointsRequest {
	//     uint32 points = 1 [(validate.field).uint32 = {
	//       gte: 1,
	//       lte: 100,
	//     }];
	//   }
	//   ```
	Uint32 *UInt32Rules `protobuf:"bytes,3,opt,name=uint32,proto3,oneof"`
}

type FieldRules_Uint64 struct {
	// Define validation rules for message fields of type `uint64`.
	//
	//   ```protobuf
	//   message AddPointsRequest {
	//     uint64 points = 1 [(validate.field).uint64 = {
	//       gte: 1,
	//       lte: 100,
	//     }];
	//   }
	//   ```
	Uint64 *UInt64Rules `protobuf:"bytes,4,opt,name=uint64,proto3,oneof"`
}

type FieldRules_Int32 struct {
	// Define validation rules for message fields of type `int32`.
	//
	//   ```protobuf
	//   message AddPointsRequest {
	//     int32 points = 1 [(validate.field).int32 = {
	//       gte: 1,
	//       lte: 100,
	//     }];
	//   }
	//   ```
	Int32 *Int32Rules `protobuf:"bytes,5,opt,name=int32,proto3,oneof"`
}

type FieldRules_Int64 struct {
	// Define validation rules for message fields of type `int64`.
	//
	//   ```protobuf
	//   message AddPointsRequest {
	//     int64 points = 1 [(validate.field).int64 = {
	//       gte: 1,
	//       lte: 100,
	//     }];
	//   }
	//   ```
	Int64 *Int64Rules `protobuf:"bytes,6,opt,name=int64,proto3,oneof"`
}

type FieldRules_Float struct {
	// Define validation rules for message fields of type `float32`.
	//
	//   ```protobuf
	//   message AddFuelRequest {
	//     float ammount = 1 [(validate.field).float = {
	//       gt: 0,
	//     }];
	//   }
	//   ```
	Float *FloatRules `protobuf:"bytes,7,opt,name=float,proto3,oneof"`
}

type FieldRules_Double struct {
	// Define validation rules for message fields of type `double`.
	//
	//   ```protobuf
	//   message AddFuelRequest {
	//     double ammount = 1 [(validate.field).double = {
	//       gt: 0,
	//     }];
	//   }
	//   ```
	Double *DoubleRules `protobuf:"bytes,8,opt,name=double,proto3,oneof"`
}

func (*FieldRules_String_) isFieldRules_Type() {}

func (*FieldRules_Bytes) isFieldRules_Type() {}

func (*FieldRules_Uint32) isFieldRules_Type() {}

func (*FieldRules_Uint64) isFieldRules_Type() {}

func (*FieldRules_Int32) isFieldRules_Type() {}

func (*FieldRules_Int64) isFieldRules_Type() {}

func (*FieldRules_Float) isFieldRules_Type() {}

func (*FieldRules_Double) isFieldRules_Type() {}

// StringRules contain all of the possible validation for string types.
type StringRules struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Require field value have a specific length.
	//
	//   ```protobuf
	//   message ReadUserByIDRequest {
	//     string uuid = 1 [(validate.field).string.len = 16];
	//   }
	//   ```
	Len *uint64 `protobuf:"varint,1,opt,name=len,proto3,oneof" json:"len,omitempty"`
	// Require field value be greater than a specific length.
	//
	//   ```protobuf
	//   message ReadUserByEmailRequest {
	//     string email = 1 [(validate.field).string.gt = 0];
	//   }
	//   ```
	Gt *uint64 `protobuf:"varint,2,opt,name=gt,proto3,oneof" json:"gt,omitempty"`
	// Require field value be less than a specific length.
	//
	//   ```protobuf
	//   message RegisterUserRequest {
	//     string email = 1 [(validate.field).string.lt = 256];
	//   }
	//   ```
	Lt *uint64 `protobuf:"varint,3,opt,name=lt,proto3,oneof" json:"lt,omitempty"`
	// Require field value contains a specific sub-string.
	//
	//   ```protobuf
	//   message RegisterUserRequest {
	//     string email = 1 [(validate.field).string.contains = "@"];
	//   }
	//   ```
	Contains *string `protobuf:"bytes,5,opt,name=contains,proto3,oneof" json:"contains,omitempty"`
	// Require field value does not contain a specific sub-string.
	//
	//   ```protobuf
	//   message RegisterUserRequest {
	//     string name = 1 [(validate.field).string.not_contains = " "];
	//   }
	//   ```
	NotContains *string `protobuf:"bytes,6,opt,name=not_contains,json=notContains,proto3,oneof" json:"not_contains,omitempty"`
	// Require field value has a specific prefix.
	//
	//   ```protobuf
	//   message TweetAtUserRequest {
	//     string name = 1 [(validate.field).string.prefix = "@"];
	//   }
	//   ```
	Prefix *string `protobuf:"bytes,7,opt,name=prefix,proto3,oneof" json:"prefix,omitempty"`
	// Require field value has a specific suffix.
	//
	//   ```protobuf
	//   message WriteRequest {
	//     string paragraph = 1 [(validate.field).string.suffix = "."];
	//   }
	//   ```
	Suffix *string `protobuf:"bytes,8,opt,name=suffix,proto3,oneof" json:"suffix,omitempty"`
	// Allow (or not) spaces.
	//
	//   ```protobuf
	//   message RegisterUserRequest {
	//     string name = 1 [(validate.field).string.allow_spaces = false];
	//   }
	//   ```
	AllowSpace *bool `protobuf:"varint,9,opt,name=allow_space,json=allowSpace,proto3,oneof" json:"allow_space,omitempty"`
	// Require field value uses only ASCII characters.
	//
	//   ```protobuf
	//   message RegisterUserRequest {
	//     string name = 1 [(validate.field).string.ascii_only = true];
	//   }
	//   ```
	AsciiOnly *bool `protobuf:"varint,10,opt,name=ascii_only,json=asciiOnly,proto3,oneof" json:"ascii_only,omitempty"`
	// Require field value have a specific minimum length.
	//
	//   ```protobuf
	//   message RegisterUserRequest {
	//     string name = 1 [(validate.field).string.min = 1];
	//   }
	//   ```
	Min *uint64 `protobuf:"varint,11,opt,name=min,proto3,oneof" json:"min,omitempty"`
	// Require field value have a specific maximum length.
	//
	//   ```protobuf
	//   message RegisterUserRequest {
	//     string name = 1 [(validate.field).string.max = 255];
	//   }
	//   ```
	Max *uint64 `protobuf:"varint,12,opt,name=max,proto3,oneof" json:"max,omitempty"`
	// Require field value match a specific regular expression.
	//
	//   ```protobuf
	//   message RegisterUserRequest {
	//     string name = 1 [(validate.field).string.match = "[[:alpha:]]"];
	//   }
	//   ```
	Match *string `protobuf:"bytes,13,opt,name=match,proto3,oneof" json:"match,omitempty"`
	// Require field value does not match a specific regular expression.
	//
	//   ```protobuf
	//   message RegisterUserRequest {
	//     string non_alpha_name = 1 [(validate.field).string.not_match = "[[:alpha:]]"];
	//   }
	//   ```
	NotMatch *string `protobuf:"bytes,14,opt,name=not_match,json=notMatch,proto3,oneof" json:"not_match,omitempty"`
	// Require a non-empty string.
	//
	//   ```protobuf
	//   message RegisterUserRequest {
	//     string name = 1 [(validate.field).string.required = true];
	//   }
	//   ```
	Required *bool `protobuf:"varint,15,opt,name=required,proto3,oneof" json:"required,omitempty"`
}

func (x *StringRules) Reset() {
	*x = StringRules{}
	if protoimpl.UnsafeEnabled {
		mi := &file_validate_validate_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringRules) ProtoMessage() {}

func (x *StringRules) ProtoReflect() protoreflect.Message {
	mi := &file_validate_validate_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringRules.ProtoReflect.Descriptor instead.
func (*StringRules) Descriptor() ([]byte, []int) {
	return file_validate_validate_proto_rawDescGZIP(), []int{1}
}

func (x *StringRules) GetLen() uint64 {
	if x != nil && x.Len != nil {
		return *x.Len
	}
	return 0
}

func (x *StringRules) GetGt() uint64 {
	if x != nil && x.Gt != nil {
		return *x.Gt
	}
	return 0
}

func (x *StringRules) GetLt() uint64 {
	if x != nil && x.Lt != nil {
		return *x.Lt
	}
	return 0
}

func (x *StringRules) GetContains() string {
	if x != nil && x.Contains != nil {
		return *x.Contains
	}
	return ""
}

func (x *StringRules) GetNotContains() string {
	if x != nil && x.NotContains != nil {
		return *x.NotContains
	}
	return ""
}

func (x *StringRules) GetPrefix() string {
	if x != nil && x.Prefix != nil {
		return *x.Prefix
	}
	return ""
}

func (x *StringRules) GetSuffix() string {
	if x != nil && x.Suffix != nil {
		return *x.Suffix
	}
	return ""
}

func (x *StringRules) GetAllowSpace() bool {
	if x != nil && x.AllowSpace != nil {
		return *x.AllowSpace
	}
	return false
}

func (x *StringRules) GetAsciiOnly() bool {
	if x != nil && x.AsciiOnly != nil {
		return *x.AsciiOnly
	}
	return false
}

func (x *StringRules) GetMin() uint64 {
	if x != nil && x.Min != nil {
		return *x.Min
	}
	return 0
}

func (x *StringRules) GetMax() uint64 {
	if x != nil && x.Max != nil {
		return *x.Max
	}
	return 0
}

func (x *StringRules) GetMatch() string {
	if x != nil && x.Match != nil {
		return *x.Match
	}
	return ""
}

func (x *StringRules) GetNotMatch() string {
	if x != nil && x.NotMatch != nil {
		return *x.NotMatch
	}
	return ""
}

func (x *StringRules) GetRequired() bool {
	if x != nil && x.Required != nil {
		return *x.Required
	}
	return false
}

// BytesRules contain all of the possible validation for bytes types.
type BytesRules struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Require field value have a specific length.
	//
	//   ```protobuf
	//   message CheckCertificateRequest {
	//     bytes pem_block = 1 [(validate.field).bytes.len = 2000];
	//   }
	//   ```
	Len *uint64 `protobuf:"varint,1,opt,name=len,proto3,oneof" json:"len,omitempty"`
	// Require field value be greater than a specific length.
	//
	//   ```protobuf
	//   message SignMessageRequest {
	//     bytes msg = 1 [(validate.field).bytes.gt = 0];
	//   }
	//   ```
	Gt *uint64 `protobuf:"varint,2,opt,name=gt,proto3,oneof" json:"gt,omitempty"`
	// Require field value be less than a specific length.
	//
	//   ```protobuf
	//   message SignMessageRequest {
	//     bytes msg = 1 [(validate.field).bytes.lt = 5000];
	//   }
	//   ```
	Lt *uint64 `protobuf:"varint,3,opt,name=lt,proto3,oneof" json:"lt,omitempty"`
	// Require field value be greater than or equal to a specific length.
	//
	//   ```protobuf
	//   message SignMessageRequest {
	//     bytes msg = 1 [(validate.field).bytes.gte = 1];
	//   }
	//   ```
	Gte *uint64 `protobuf:"varint,4,opt,name=gte,proto3,oneof" json:"gte,omitempty"`
	// Require field value be less than or equal to a specific length.
	//
	//   ```protobuf
	//   message SignMessageRequest {
	//     bytes msg = 1 [(validate.field).bytes.lte = 500];
	//   }
	//   ```
	Lte *uint64 `protobuf:"varint,5,opt,name=lte,proto3,oneof" json:"lte,omitempty"`
	// Require field value to have a specific minimum length.
	//
	//   ```protobuf
	//   message SignMessageRequest {
	//     bytes msg = 1 [(validate.field).bytes.min = 1];
	//   }
	//   ```
	Min *uint64 `protobuf:"varint,6,opt,name=min,proto3,oneof" json:"min,omitempty"`
	// Require field value to have a specific maximum length.
	//
	//   ```protobuf
	//   message SignMessageRequest {
	//     bytes msg = 1 [(validate.field).bytes.max = 500];
	//   }
	//   ```
	Max *uint64 `protobuf:"varint,7,opt,name=max,proto3,oneof" json:"max,omitempty"`
	// Require field value to have a specific prefix.
	//
	//   ```protobuf
	//   message StoreKeyRequest {
	//     bytes key = 1 [(validate.field).bytes.prefix = "-----BEGIN PRIVATE KEY-----\n"];
	//   }
	//   ```
	Prefix *string `protobuf:"bytes,8,opt,name=prefix,proto3,oneof" json:"prefix,omitempty"`
	// Require field value to have a specific suffix.
	//
	//   ```protobuf
	//   message StoreKeyRequest {
	//     bytes key = 1 [(validate.field).bytes.suffix = "-----END PRIVATE KEY-----\n"];
	//   }
	//   ```
	Suffix *string `protobuf:"bytes,9,opt,name=suffix,proto3,oneof" json:"suffix,omitempty"`
	// Require a non-empty chunk of bytes.
	//
	//   ```protobuf
	//   message StoreKeyRequest {
	//     bytes key = 1 [(validate.field).bytes.required = true];
	//   }
	//   ```
	Required *bool `protobuf:"varint,10,opt,name=required,proto3,oneof" json:"required,omitempty"`
}

func (x *BytesRules) Reset() {
	*x = BytesRules{}
	if protoimpl.UnsafeEnabled {
		mi := &file_validate_validate_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BytesRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BytesRules) ProtoMessage() {}

func (x *BytesRules) ProtoReflect() protoreflect.Message {
	mi := &file_validate_validate_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BytesRules.ProtoReflect.Descriptor instead.
func (*BytesRules) Descriptor() ([]byte, []int) {
	return file_validate_validate_proto_rawDescGZIP(), []int{2}
}

func (x *BytesRules) GetLen() uint64 {
	if x != nil && x.Len != nil {
		return *x.Len
	}
	return 0
}

func (x *BytesRules) GetGt() uint64 {
	if x != nil && x.Gt != nil {
		return *x.Gt
	}
	return 0
}

func (x *BytesRules) GetLt() uint64 {
	if x != nil && x.Lt != nil {
		return *x.Lt
	}
	return 0
}

func (x *BytesRules) GetGte() uint64 {
	if x != nil && x.Gte != nil {
		return *x.Gte
	}
	return 0
}

func (x *BytesRules) GetLte() uint64 {
	if x != nil && x.Lte != nil {
		return *x.Lte
	}
	return 0
}

func (x *BytesRules) GetMin() uint64 {
	if x != nil && x.Min != nil {
		return *x.Min
	}
	return 0
}

func (x *BytesRules) GetMax() uint64 {
	if x != nil && x.Max != nil {
		return *x.Max
	}
	return 0
}

func (x *BytesRules) GetPrefix() string {
	if x != nil && x.Prefix != nil {
		return *x.Prefix
	}
	return ""
}

func (x *BytesRules) GetSuffix() string {
	if x != nil && x.Suffix != nil {
		return *x.Suffix
	}
	return ""
}

func (x *BytesRules) GetRequired() bool {
	if x != nil && x.Required != nil {
		return *x.Required
	}
	return false
}

// UInt32Rules contain all of the possible validation for uint32 types.
type UInt32Rules struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Require field value to equal a specific value.
	//
	//   ```protobuf
	//   message AwardPointsRequest {
	//     uint32 points = 1 [(validate.field).uint32.eq = 10];
	//   }
	//   ```
	Eq *uint32 `protobuf:"varint,1,opt,name=eq,proto3,oneof" json:"eq,omitempty"`
	// Require field value be greater than a specific value.
	//
	//   ```protobuf
	//   message AwardPointsRequest {
	//     uint32 points = 1 [(validate.field).uint32.gt = 0];
	//   }
	//   ```
	Gt *uint32 `protobuf:"varint,2,opt,name=gt,proto3,oneof" json:"gt,omitempty"`
	// Require field value be less than a specific value.
	//
	//   ```protobuf
	//   message AwardPointsRequest {
	//     uint32 points = 1 [(validate.field).uint32.lt = 1000];
	//   }
	//   ```
	Lt *uint32 `protobuf:"varint,3,opt,name=lt,proto3,oneof" json:"lt,omitempty"`
	// Require field value be greater than or equal to a specific value.
	//
	//   ```protobuf
	//   message AwardPointsRequest {
	//     uint32 points = 1 [(validate.field).uint32.gte = 1];
	//   }
	//   ```
	Gte *uint32 `protobuf:"varint,4,opt,name=gte,proto3,oneof" json:"gte,omitempty"`
	// Require field value be greater than or equal to a specific value.
	//
	//   ```protobuf
	//   message AwardPointsRequest {
	//     uint32 points = 1 [(validate.field).uint32.lte = 100];
	//   }
	//   ```
	Lte *uint32 `protobuf:"varint,5,opt,name=lte,proto3,oneof" json:"lte,omitempty"`
	// Require field value to have a specific minimum value.
	//
	//   ```protobuf
	//   message AwardPointsRequest {
	//     uint32 points = 1 [(validate.field).uint32.min = 1];
	//   }
	//   ```
	Min *uint32 `protobuf:"varint,6,opt,name=min,proto3,oneof" json:"min,omitempty"`
	// Require field value to have a specific maximum value.
	//
	//   ```protobuf
	//   message AwardPointsRequest {
	//     uint32 points = 1 [(validate.field).uint32.min = 1];
	//   }
	//   ```
	Max *uint32 `protobuf:"varint,7,opt,name=max,proto3,oneof" json:"max,omitempty"`
	// Require field to have a non-empty and non-zero value.
	//
	//   ```protobuf
	//   message AwardPointsRequest {
	//     uint32 points = 1 [(validate.field).uint32.required = true];
	//   }
	//   ```
	Required *bool `protobuf:"varint,10,opt,name=required,proto3,oneof" json:"required,omitempty"`
}

func (x *UInt32Rules) Reset() {
	*x = UInt32Rules{}
	if protoimpl.UnsafeEnabled {
		mi := &file_validate_validate_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UInt32Rules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UInt32Rules) ProtoMessage() {}

func (x *UInt32Rules) ProtoReflect() protoreflect.Message {
	mi := &file_validate_validate_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UInt32Rules.ProtoReflect.Descriptor instead.
func (*UInt32Rules) Descriptor() ([]byte, []int) {
	return file_validate_validate_proto_rawDescGZIP(), []int{3}
}

func (x *UInt32Rules) GetEq() uint32 {
	if x != nil && x.Eq != nil {
		return *x.Eq
	}
	return 0
}

func (x *UInt32Rules) GetGt() uint32 {
	if x != nil && x.Gt != nil {
		return *x.Gt
	}
	return 0
}

func (x *UInt32Rules) GetLt() uint32 {
	if x != nil && x.Lt != nil {
		return *x.Lt
	}
	return 0
}

func (x *UInt32Rules) GetGte() uint32 {
	if x != nil && x.Gte != nil {
		return *x.Gte
	}
	return 0
}

func (x *UInt32Rules) GetLte() uint32 {
	if x != nil && x.Lte != nil {
		return *x.Lte
	}
	return 0
}

func (x *UInt32Rules) GetMin() uint32 {
	if x != nil && x.Min != nil {
		return *x.Min
	}
	return 0
}

func (x *UInt32Rules) GetMax() uint32 {
	if x != nil && x.Max != nil {
		return *x.Max
	}
	return 0
}

func (x *UInt32Rules) GetRequired() bool {
	if x != nil && x.Required != nil {
		return *x.Required
	}
	return false
}

// Int32Rules contain all of the possible validation for int32 types.
type Int32Rules struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Require field value to equal a specific value.
	//
	//   ```protobuf
	//   message AwardPointsRequest {
	//     int32 points = 1 [(validate.field).int32.eq = 10];
	//   }
	//   ```
	Eq *int32 `protobuf:"varint,1,opt,name=eq,proto3,oneof" json:"eq,omitempty"`
	// Require field value be greater than a specific value.
	//
	//   ```protobuf
	//   message AwardPointsRequest {
	//     int32 points = 1 [(validate.field).int32.gt = 0];
	//   }
	//   ```
	Gt *int32 `protobuf:"varint,2,opt,name=gt,proto3,oneof" json:"gt,omitempty"`
	// Require field value be less than a specific value.
	//
	//   ```protobuf
	//   message AwardPointsRequest {
	//     int32 points = 1 [(validate.field).int32.lt = 1000];
	//   }
	//   ```
	Lt *int32 `protobuf:"varint,3,opt,name=lt,proto3,oneof" json:"lt,omitempty"`
	// Require field value be greater than or equal to a specific value.
	//
	//   ```protobuf
	//   message AwardPointsRequest {
	//     int32 points = 1 [(validate.field).int32.gte = 1];
	//   }
	//   ```
	Gte *int32 `protobuf:"varint,4,opt,name=gte,proto3,oneof" json:"gte,omitempty"`
	// Require field value be greater than or equal to a specific value.
	//
	//   ```protobuf
	//   message AwardPointsRequest {
	//     int32 points = 1 [(validate.field).int32.lte = 100];
	//   }
	//   ```
	Lte *int32 `protobuf:"varint,5,opt,name=lte,proto3,oneof" json:"lte,omitempty"`
	// Require field value to have a specific minimum value.
	//
	//   ```protobuf
	//   message AwardPointsRequest {
	//     int32 points = 1 [(validate.field).int32.min = 1];
	//   }
	//   ```
	Min *int32 `protobuf:"varint,6,opt,name=min,proto3,oneof" json:"min,omitempty"`
	// Require field value to have a specific maximum value.
	//
	//   ```protobuf
	//   message AwardPointsRequest {
	//     int32 points = 1 [(validate.field).int32.min = 1];
	//   }
	//   ```
	Max *int32 `protobuf:"varint,7,opt,name=max,proto3,oneof" json:"max,omitempty"`
	// Require field to have a non-empty and non-zero value.
	//
	//   ```protobuf
	//   message AwardPointsRequest {
	//     int32 points = 1 [(validate.field).int32.required = true];
	//   }
	//   ```
	Required *bool `protobuf:"varint,10,opt,name=required,proto3,oneof" json:"required,omitempty"`
}

func (x *Int32Rules) Reset() {
	*x = Int32Rules{}
	if protoimpl.UnsafeEnabled {
		mi := &file_validate_validate_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Int32Rules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Int32Rules) ProtoMessage() {}

func (x *Int32Rules) ProtoReflect() protoreflect.Message {
	mi := &file_validate_validate_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Int32Rules.ProtoReflect.Descriptor instead.
func (*Int32Rules) Descriptor() ([]byte, []int) {
	return file_validate_validate_proto_rawDescGZIP(), []int{4}
}

func (x *Int32Rules) GetEq() int32 {
	if x != nil && x.Eq != nil {
		return *x.Eq
	}
	return 0
}

func (x *Int32Rules) GetGt() int32 {
	if x != nil && x.Gt != nil {
		return *x.Gt
	}
	return 0
}

func (x *Int32Rules) GetLt() int32 {
	if x != nil && x.Lt != nil {
		return *x.Lt
	}
	return 0
}

func (x *Int32Rules) GetGte() int32 {
	if x != nil && x.Gte != nil {
		return *x.Gte
	}
	return 0
}

func (x *Int32Rules) GetLte() int32 {
	if x != nil && x.Lte != nil {
		return *x.Lte
	}
	return 0
}

func (x *Int32Rules) GetMin() int32 {
	if x != nil && x.Min != nil {
		return *x.Min
	}
	return 0
}

func (x *Int32Rules) GetMax() int32 {
	if x != nil && x.Max != nil {
		return *x.Max
	}
	return 0
}

func (x *Int32Rules) GetRequired() bool {
	if x != nil && x.Required != nil {
		return *x.Required
	}
	return false
}

// UInt64Rules contain all of the possible validation for uint64 types.
type UInt64Rules struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Require field value to equal a specific value.
	//
	//   ```protobuf
	//   message AwardPointsRequest {
	//     uint64 points = 1 [(validate.field).uint64.eq = 10];
	//   }
	//   ```
	Eq *uint64 `protobuf:"varint,1,opt,name=eq,proto3,oneof" json:"eq,omitempty"`
	// Require field value be greater than a specific value.
	//
	//   ```protobuf
	//   message AwardPointsRequest {
	//     uint64 points = 1 [(validate.field).uint64.gt = 0];
	//   }
	//   ```
	Gt *uint64 `protobuf:"varint,2,opt,name=gt,proto3,oneof" json:"gt,omitempty"`
	// Require field value be less than a specific value.
	//
	//   ```protobuf
	//   message AwardPointsRequest {
	//     uint64 points = 1 [(validate.field).uint64.lt = 1000];
	//   }
	//   ```
	Lt *uint64 `protobuf:"varint,3,opt,name=lt,proto3,oneof" json:"lt,omitempty"`
	// Require field value be greater than or equal to a specific value.
	//
	//   ```protobuf
	//   message AwardPointsRequest {
	//     uint64 points = 1 [(validate.field).uint64.gte = 1];
	//   }
	//   ```
	Gte *uint64 `protobuf:"varint,4,opt,name=gte,proto3,oneof" json:"gte,omitempty"`
	// Require field value be greater than or equal to a specific value.
	//
	//   ```protobuf
	//   message AwardPointsRequest {
	//     uint64 points = 1 [(validate.field).uint64.lte = 100];
	//   }
	//   ```
	Lte *uint64 `protobuf:"varint,5,opt,name=lte,proto3,oneof" json:"lte,omitempty"`
	// Require field value to have a specific minimum value.
	//
	//   ```protobuf
	//   message AwardPointsRequest {
	//     uint points = 1 [(validate.field).uint64.min = 1];
	//   }
	//   ```
	Min *uint64 `protobuf:"varint,6,opt,name=min,proto3,oneof" json:"min,omitempty"`
	// Require field value to have a specific maximum value.
	//
	//   ```protobuf
	//   message AwardPointsRequest {
	//     uint64 points = 1 [(validate.field).uint64.min = 1];
	//   }
	//   ```
	Max *uint64 `protobuf:"varint,7,opt,name=max,proto3,oneof" json:"max,omitempty"`
	// Require field to have a non-empty and non-zero value.
	//
	//   ```protobuf
	//   message AwardPointsRequest {
	//     uint64 points = 1 [(validate.field).uint64.required = true];
	//   }
	//   ```
	Required *bool `protobuf:"varint,10,opt,name=required,proto3,oneof" json:"required,omitempty"`
}

func (x *UInt64Rules) Reset() {
	*x = UInt64Rules{}
	if protoimpl.UnsafeEnabled {
		mi := &file_validate_validate_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UInt64Rules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UInt64Rules) ProtoMessage() {}

func (x *UInt64Rules) ProtoReflect() protoreflect.Message {
	mi := &file_validate_validate_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UInt64Rules.ProtoReflect.Descriptor instead.
func (*UInt64Rules) Descriptor() ([]byte, []int) {
	return file_validate_validate_proto_rawDescGZIP(), []int{5}
}

func (x *UInt64Rules) GetEq() uint64 {
	if x != nil && x.Eq != nil {
		return *x.Eq
	}
	return 0
}

func (x *UInt64Rules) GetGt() uint64 {
	if x != nil && x.Gt != nil {
		return *x.Gt
	}
	return 0
}

func (x *UInt64Rules) GetLt() uint64 {
	if x != nil && x.Lt != nil {
		return *x.Lt
	}
	return 0
}

func (x *UInt64Rules) GetGte() uint64 {
	if x != nil && x.Gte != nil {
		return *x.Gte
	}
	return 0
}

func (x *UInt64Rules) GetLte() uint64 {
	if x != nil && x.Lte != nil {
		return *x.Lte
	}
	return 0
}

func (x *UInt64Rules) GetMin() uint64 {
	if x != nil && x.Min != nil {
		return *x.Min
	}
	return 0
}

func (x *UInt64Rules) GetMax() uint64 {
	if x != nil && x.Max != nil {
		return *x.Max
	}
	return 0
}

func (x *UInt64Rules) GetRequired() bool {
	if x != nil && x.Required != nil {
		return *x.Required
	}
	return false
}

// Int64Rules contain all of the possible validation for int64 types.
type Int64Rules struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Require field value to equal a specific value.
	//
	//   ```protobuf
	//   message AwardPointsRequest {
	//     int64 points = 1 [(validate.field).int64.eq = 10];
	//   }
	//   ```
	Eq *int64 `protobuf:"varint,1,opt,name=eq,proto3,oneof" json:"eq,omitempty"`
	// Require field value be greater than a specific value.
	//
	//   ```protobuf
	//   message AwardPointsRequest {
	//     int64 points = 1 [(validate.field).int64.gt = 0];
	//   }
	//   ```
	Gt *int64 `protobuf:"varint,2,opt,name=gt,proto3,oneof" json:"gt,omitempty"`
	// Require field value be less than a specific value.
	//
	//   ```protobuf
	//   message AwardPointsRequest {
	//     int64 points = 1 [(validate.field).int64.lt = 1000];
	//   }
	//   ```
	Lt *int64 `protobuf:"varint,3,opt,name=lt,proto3,oneof" json:"lt,omitempty"`
	// Require field value be greater than or equal to a specific value.
	//
	//   ```protobuf
	//   message AwardPointsRequest {
	//     int64 points = 1 [(validate.field).int64.gte = 1];
	//   }
	//   ```
	Gte *int64 `protobuf:"varint,4,opt,name=gte,proto3,oneof" json:"gte,omitempty"`
	// Require field value be greater than or equal to a specific value.
	//
	//   ```protobuf
	//   message AwardPointsRequest {
	//     int64 points = 1 [(validate.field).int64.lte = 100];
	//   }
	//   ```
	Lte *int64 `protobuf:"varint,5,opt,name=lte,proto3,oneof" json:"lte,omitempty"`
	// Require field value to have a specific minimum value.
	//
	//   ```protobuf
	//   message AwardPointsRequest {
	//     uint points = 1 [(validate.field).int64.min = 1];
	//   }
	//   ```
	Min *int64 `protobuf:"varint,6,opt,name=min,proto3,oneof" json:"min,omitempty"`
	// Require field value to have a specific maximum value.
	//
	//   ```protobuf
	//   message AwardPointsRequest {
	//     int64 points = 1 [(validate.field).int64.min = 1];
	//   }
	//   ```
	Max *int64 `protobuf:"varint,7,opt,name=max,proto3,oneof" json:"max,omitempty"`
	// Require field to have a non-empty and non-zero value.
	//
	//   ```protobuf
	//   message AwardPointsRequest {
	//     int64 points = 1 [(validate.field).int64.required = true];
	//   }
	//   ```
	Required *bool `protobuf:"varint,10,opt,name=required,proto3,oneof" json:"required,omitempty"`
}

func (x *Int64Rules) Reset() {
	*x = Int64Rules{}
	if protoimpl.UnsafeEnabled {
		mi := &file_validate_validate_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Int64Rules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Int64Rules) ProtoMessage() {}

func (x *Int64Rules) ProtoReflect() protoreflect.Message {
	mi := &file_validate_validate_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Int64Rules.ProtoReflect.Descriptor instead.
func (*Int64Rules) Descriptor() ([]byte, []int) {
	return file_validate_validate_proto_rawDescGZIP(), []int{6}
}

func (x *Int64Rules) GetEq() int64 {
	if x != nil && x.Eq != nil {
		return *x.Eq
	}
	return 0
}

func (x *Int64Rules) GetGt() int64 {
	if x != nil && x.Gt != nil {
		return *x.Gt
	}
	return 0
}

func (x *Int64Rules) GetLt() int64 {
	if x != nil && x.Lt != nil {
		return *x.Lt
	}
	return 0
}

func (x *Int64Rules) GetGte() int64 {
	if x != nil && x.Gte != nil {
		return *x.Gte
	}
	return 0
}

func (x *Int64Rules) GetLte() int64 {
	if x != nil && x.Lte != nil {
		return *x.Lte
	}
	return 0
}

func (x *Int64Rules) GetMin() int64 {
	if x != nil && x.Min != nil {
		return *x.Min
	}
	return 0
}

func (x *Int64Rules) GetMax() int64 {
	if x != nil && x.Max != nil {
		return *x.Max
	}
	return 0
}

func (x *Int64Rules) GetRequired() bool {
	if x != nil && x.Required != nil {
		return *x.Required
	}
	return false
}

// FloatRules contain all of the possible validation for float types.
type FloatRules struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Require field value to equal a specific value.
	//
	//   ```protobuf
	//   message AwardPointsRequest {
	//     float points = 1 [(validate.field).float.eq = 10];
	//   }
	//   ```
	Eq *float32 `protobuf:"fixed32,1,opt,name=eq,proto3,oneof" json:"eq,omitempty"`
	// Require field value be greater than a specific value.
	//
	//   ```protobuf
	//   message AwardPointsRequest {
	//     float points = 1 [(validate.field).float.gt = 0];
	//   }
	//   ```
	Gt *float32 `protobuf:"fixed32,2,opt,name=gt,proto3,oneof" json:"gt,omitempty"`
	// Require field value be less than a specific value.
	//
	//   ```protobuf
	//   message AwardPointsRequest {
	//     float points = 1 [(validate.field).float.lt = 1000];
	//   }
	//   ```
	Lt *float32 `protobuf:"fixed32,3,opt,name=lt,proto3,oneof" json:"lt,omitempty"`
	// Require field value be greater than or equal to a specific value.
	//
	//   ```protobuf
	//   message AwardPointsRequest {
	//     float points = 1 [(validate.field).float.gte = 1];
	//   }
	//   ```
	Gte *float32 `protobuf:"fixed32,4,opt,name=gte,proto3,oneof" json:"gte,omitempty"`
	// Require field value be greater than or equal to a specific value.
	//
	//   ```protobuf
	//   message AwardPointsRequest {
	//     float points = 1 [(validate.field).float.lte = 100];
	//   }
	//   ```
	Lte *float32 `protobuf:"fixed32,5,opt,name=lte,proto3,oneof" json:"lte,omitempty"`
	// Require field value to have a specific minimum value.
	//
	//   ```protobuf
	//   message AwardPointsRequest {
	//     uint points = 1 [(validate.field).float.min = 1];
	//   }
	//   ```
	Min *float32 `protobuf:"fixed32,6,opt,name=min,proto3,oneof" json:"min,omitempty"`
	// Require field value to have a specific maximum value.
	//
	//   ```protobuf
	//   message AwardPointsRequest {
	//     float points = 1 [(validate.field).float.min = 1];
	//   }
	//   ```
	Max *float32 `protobuf:"fixed32,7,opt,name=max,proto3,oneof" json:"max,omitempty"`
	// Require field to have a non-empty and non-zero value.
	//
	//   ```protobuf
	//   message AwardPointsRequest {
	//     float points = 1 [(validate.field).float.required = true];
	//   }
	//   ```
	Required *bool `protobuf:"varint,10,opt,name=required,proto3,oneof" json:"required,omitempty"`
}

func (x *FloatRules) Reset() {
	*x = FloatRules{}
	if protoimpl.UnsafeEnabled {
		mi := &file_validate_validate_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FloatRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FloatRules) ProtoMessage() {}

func (x *FloatRules) ProtoReflect() protoreflect.Message {
	mi := &file_validate_validate_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FloatRules.ProtoReflect.Descriptor instead.
func (*FloatRules) Descriptor() ([]byte, []int) {
	return file_validate_validate_proto_rawDescGZIP(), []int{7}
}

func (x *FloatRules) GetEq() float32 {
	if x != nil && x.Eq != nil {
		return *x.Eq
	}
	return 0
}

func (x *FloatRules) GetGt() float32 {
	if x != nil && x.Gt != nil {
		return *x.Gt
	}
	return 0
}

func (x *FloatRules) GetLt() float32 {
	if x != nil && x.Lt != nil {
		return *x.Lt
	}
	return 0
}

func (x *FloatRules) GetGte() float32 {
	if x != nil && x.Gte != nil {
		return *x.Gte
	}
	return 0
}

func (x *FloatRules) GetLte() float32 {
	if x != nil && x.Lte != nil {
		return *x.Lte
	}
	return 0
}

func (x *FloatRules) GetMin() float32 {
	if x != nil && x.Min != nil {
		return *x.Min
	}
	return 0
}

func (x *FloatRules) GetMax() float32 {
	if x != nil && x.Max != nil {
		return *x.Max
	}
	return 0
}

func (x *FloatRules) GetRequired() bool {
	if x != nil && x.Required != nil {
		return *x.Required
	}
	return false
}

// DoubleRules contain all of the possible validation for double types.
type DoubleRules struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Require field value to equal a specific value.
	//
	//   ```protobuf
	//   message AwardPointsRequest {
	//     double points = 1 [(validate.field).double.eq = 10];
	//   }
	//   ```
	Eq *float64 `protobuf:"fixed64,1,opt,name=eq,proto3,oneof" json:"eq,omitempty"`
	// Require field value be greater than a specific value.
	//
	//   ```protobuf
	//   message AwardPointsRequest {
	//     double points = 1 [(validate.field).double.gt = 0];
	//   }
	//   ```
	Gt *float64 `protobuf:"fixed64,2,opt,name=gt,proto3,oneof" json:"gt,omitempty"`
	// Require field value be less than a specific value.
	//
	//   ```protobuf
	//   message AwardPointsRequest {
	//     double points = 1 [(validate.field).double.lt = 1000];
	//   }
	//   ```
	Lt *float64 `protobuf:"fixed64,3,opt,name=lt,proto3,oneof" json:"lt,omitempty"`
	// Require field value be greater than or equal to a specific value.
	//
	//   ```protobuf
	//   message AwardPointsRequest {
	//     double points = 1 [(validate.field).double.gte = 1];
	//   }
	//   ```
	Gte *float64 `protobuf:"fixed64,4,opt,name=gte,proto3,oneof" json:"gte,omitempty"`
	// Require field value be greater than or equal to a specific value.
	//
	//   ```protobuf
	//   message AwardPointsRequest {
	//     double points = 1 [(validate.field).double.lte = 100];
	//   }
	//   ```
	Lte *float64 `protobuf:"fixed64,5,opt,name=lte,proto3,oneof" json:"lte,omitempty"`
	// Require field value to have a specific minimum value.
	//
	//   ```protobuf
	//   message AwardPointsRequest {
	//     uint points = 1 [(validate.field).double.min = 1];
	//   }
	//   ```
	Min *float64 `protobuf:"fixed64,6,opt,name=min,proto3,oneof" json:"min,omitempty"`
	// Require field value to have a specific maximum value.
	//
	//   ```protobuf
	//   message AwardPointsRequest {
	//     double points = 1 [(validate.field).double.min = 1];
	//   }
	//   ```
	Max *float64 `protobuf:"fixed64,7,opt,name=max,proto3,oneof" json:"max,omitempty"`
	// Require field to have a non-empty and non-zero value.
	//
	//   ```protobuf
	//   message AwardPointsRequest {
	//     double points = 1 [(validate.field).float.required = true];
	//   }
	//   ```
	Required *bool `protobuf:"varint,10,opt,name=required,proto3,oneof" json:"required,omitempty"`
}

func (x *DoubleRules) Reset() {
	*x = DoubleRules{}
	if protoimpl.UnsafeEnabled {
		mi := &file_validate_validate_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DoubleRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoubleRules) ProtoMessage() {}

func (x *DoubleRules) ProtoReflect() protoreflect.Message {
	mi := &file_validate_validate_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoubleRules.ProtoReflect.Descriptor instead.
func (*DoubleRules) Descriptor() ([]byte, []int) {
	return file_validate_validate_proto_rawDescGZIP(), []int{8}
}

func (x *DoubleRules) GetEq() float64 {
	if x != nil && x.Eq != nil {
		return *x.Eq
	}
	return 0
}

func (x *DoubleRules) GetGt() float64 {
	if x != nil && x.Gt != nil {
		return *x.Gt
	}
	return 0
}

func (x *DoubleRules) GetLt() float64 {
	if x != nil && x.Lt != nil {
		return *x.Lt
	}
	return 0
}

func (x *DoubleRules) GetGte() float64 {
	if x != nil && x.Gte != nil {
		return *x.Gte
	}
	return 0
}

func (x *DoubleRules) GetLte() float64 {
	if x != nil && x.Lte != nil {
		return *x.Lte
	}
	return 0
}

func (x *DoubleRules) GetMin() float64 {
	if x != nil && x.Min != nil {
		return *x.Min
	}
	return 0
}

func (x *DoubleRules) GetMax() float64 {
	if x != nil && x.Max != nil {
		return *x.Max
	}
	return 0
}

func (x *DoubleRules) GetRequired() bool {
	if x != nil && x.Required != nil {
		return *x.Required
	}
	return false
}

var file_validate_validate_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*FieldRules)(nil),
		Field:         1081,
		Name:          "validate.field",
		Tag:           "bytes,1081,opt,name=field",
		Filename:      "validate/validate.proto",
	},
}

// Extension fields to descriptorpb.FieldOptions.
var (
	// optional validate.FieldRules field = 1081;
	E_Field = &file_validate_validate_proto_extTypes[0]
)

var File_validate_validate_proto protoreflect.FileDescriptor

var file_validate_validate_proto_rawDesc = []byte{
	0x0a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x90, 0x03, 0x0a, 0x0a, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52,
	0x75, 0x6c, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x48, 0x00, 0x52, 0x06, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x2c, 0x0a, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x48, 0x00, 0x52, 0x05, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x06, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x55,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x48, 0x00, 0x52, 0x06, 0x75, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x12, 0x2f, 0x0a, 0x06, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e,
	0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x48, 0x00, 0x52, 0x06, 0x75,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x2c, 0x0a, 0x05, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x48, 0x00, 0x52, 0x05, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x12, 0x2c, 0x0a, 0x05, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x48, 0x00, 0x52, 0x05, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x12, 0x2c, 0x0a, 0x05, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x61,
	0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x48, 0x00, 0x52, 0x05, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x12,
	0x2f, 0x0a, 0x06, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x48, 0x00, 0x52, 0x06, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xc5, 0x04, 0x0a, 0x0b, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x15, 0x0a, 0x03, 0x6c, 0x65, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x03, 0x6c, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x13, 0x0a, 0x02, 0x67, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52, 0x02, 0x67,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x48, 0x02, 0x52, 0x02, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x08, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6e, 0x6f,
	0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x04, 0x52, 0x0b, 0x6e, 0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x05, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x88, 0x01, 0x01, 0x12,
	0x1b, 0x0a, 0x06, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x06, 0x52, 0x06, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x07, 0x52, 0x0a, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x70, 0x61, 0x63, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x61, 0x73, 0x63, 0x69, 0x69, 0x5f, 0x6f, 0x6e, 0x6c, 0x79,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x48, 0x08, 0x52, 0x09, 0x61, 0x73, 0x63, 0x69, 0x69, 0x4f,
	0x6e, 0x6c, 0x79, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x04, 0x48, 0x09, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a,
	0x03, 0x6d, 0x61, 0x78, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x48, 0x0a, 0x52, 0x03, 0x6d, 0x61,
	0x78, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x88, 0x01, 0x01, 0x12,
	0x20, 0x0a, 0x09, 0x6e, 0x6f, 0x74, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x0c, 0x52, 0x08, 0x6e, 0x6f, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x88, 0x01,
	0x01, 0x12, 0x1f, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x0d, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x88,
	0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6c, 0x65, 0x6e, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x67,
	0x74, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x6c, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x61, 0x73, 0x63, 0x69, 0x69, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x42, 0x06, 0x0a, 0x04, 0x5f,
	0x6d, 0x69, 0x6e, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6d, 0x61, 0x78, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x22, 0xdd, 0x02, 0x0a, 0x0a, 0x42, 0x79, 0x74, 0x65, 0x73, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12,
	0x15, 0x0a, 0x03, 0x6c, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x03,
	0x6c, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x67, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x48, 0x01, 0x52, 0x02, 0x67, 0x74, 0x88, 0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x6c,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x48, 0x02, 0x52, 0x02, 0x6c, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x15, 0x0a, 0x03, 0x67, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x48, 0x03, 0x52,
	0x03, 0x67, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x6c, 0x74, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x04, 0x48, 0x04, 0x52, 0x03, 0x6c, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x15,
	0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x48, 0x05, 0x52, 0x03, 0x6d,
	0x69, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x04, 0x48, 0x06, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x06,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x75, 0x66,
	0x66, 0x69, 0x78, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x06, 0x73, 0x75, 0x66,
	0x66, 0x69, 0x78, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x48, 0x09, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6c, 0x65, 0x6e, 0x42,
	0x05, 0x0a, 0x03, 0x5f, 0x67, 0x74, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x6c, 0x74, 0x42, 0x06, 0x0a,
	0x04, 0x5f, 0x67, 0x74, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6c, 0x74, 0x65, 0x42, 0x06, 0x0a,
	0x04, 0x5f, 0x6d, 0x69, 0x6e, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6d, 0x61, 0x78, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x75, 0x66,
	0x66, 0x69, 0x78, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x22, 0x8b, 0x02, 0x0a, 0x0b, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x52, 0x75, 0x6c, 0x65, 0x73,
	0x12, 0x13, 0x0a, 0x02, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x02,
	0x65, 0x71, 0x88, 0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x67, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x48, 0x01, 0x52, 0x02, 0x67, 0x74, 0x88, 0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x6c, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x02, 0x52, 0x02, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x15, 0x0a, 0x03, 0x67, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x03, 0x52, 0x03,
	0x67, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x6c, 0x74, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x48, 0x04, 0x52, 0x03, 0x6c, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a,
	0x03, 0x6d, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x05, 0x52, 0x03, 0x6d, 0x69,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x48, 0x06, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x48, 0x07, 0x52,
	0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03,
	0x5f, 0x65, 0x71, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x67, 0x74, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x6c,
	0x74, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x67, 0x74, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6c, 0x74,
	0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6d, 0x69, 0x6e, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6d, 0x61,
	0x78, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x22, 0x8a,
	0x02, 0x0a, 0x0a, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x13, 0x0a,
	0x02, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x02, 0x65, 0x71, 0x88,
	0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x67, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01,
	0x52, 0x02, 0x67, 0x74, 0x88, 0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x6c, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x02, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03,
	0x67, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x03, 0x67, 0x74, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x6c, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x04, 0x52, 0x03, 0x6c, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x6d, 0x69,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x48, 0x05, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x88, 0x01,
	0x01, 0x12, 0x15, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x48, 0x06,
	0x52, 0x03, 0x6d, 0x61, 0x78, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x48, 0x07, 0x52, 0x08, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x65, 0x71,
	0x42, 0x05, 0x0a, 0x03, 0x5f, 0x67, 0x74, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x6c, 0x74, 0x42, 0x06,
	0x0a, 0x04, 0x5f, 0x67, 0x74, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6c, 0x74, 0x65, 0x42, 0x06,
	0x0a, 0x04, 0x5f, 0x6d, 0x69, 0x6e, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6d, 0x61, 0x78, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x22, 0x8b, 0x02, 0x0a, 0x0b,
	0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x13, 0x0a, 0x02, 0x65,
	0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x02, 0x65, 0x71, 0x88, 0x01, 0x01,
	0x12, 0x13, 0x0a, 0x02, 0x67, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52, 0x02,
	0x67, 0x74, 0x88, 0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x48, 0x02, 0x52, 0x02, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x67, 0x74,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x48, 0x03, 0x52, 0x03, 0x67, 0x74, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x15, 0x0a, 0x03, 0x6c, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x48, 0x04,
	0x52, 0x03, 0x6c, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x04, 0x48, 0x05, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x15, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x48, 0x06, 0x52, 0x03,
	0x6d, 0x61, 0x78, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x48, 0x07, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x65, 0x71, 0x42, 0x05,
	0x0a, 0x03, 0x5f, 0x67, 0x74, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x6c, 0x74, 0x42, 0x06, 0x0a, 0x04,
	0x5f, 0x67, 0x74, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6c, 0x74, 0x65, 0x42, 0x06, 0x0a, 0x04,
	0x5f, 0x6d, 0x69, 0x6e, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6d, 0x61, 0x78, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x22, 0x8a, 0x02, 0x0a, 0x0a, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x13, 0x0a, 0x02, 0x65, 0x71, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x02, 0x65, 0x71, 0x88, 0x01, 0x01, 0x12, 0x13, 0x0a,
	0x02, 0x67, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x02, 0x67, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02,
	0x52, 0x02, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x67, 0x74, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x48, 0x03, 0x52, 0x03, 0x67, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x15,
	0x0a, 0x03, 0x6c, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x48, 0x04, 0x52, 0x03, 0x6c,
	0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x48, 0x05, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03,
	0x6d, 0x61, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x48, 0x06, 0x52, 0x03, 0x6d, 0x61, 0x78,
	0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x08, 0x48, 0x07, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x65, 0x71, 0x42, 0x05, 0x0a, 0x03, 0x5f,
	0x67, 0x74, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x6c, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x67, 0x74,
	0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6c, 0x74, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6d, 0x69,
	0x6e, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6d, 0x61, 0x78, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x22, 0x8a, 0x02, 0x0a, 0x0a, 0x46, 0x6c, 0x6f, 0x61, 0x74,
	0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x13, 0x0a, 0x02, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x02, 0x48, 0x00, 0x52, 0x02, 0x65, 0x71, 0x88, 0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x67, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x48, 0x01, 0x52, 0x02, 0x67, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x13, 0x0a, 0x02, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x48, 0x02, 0x52, 0x02, 0x6c,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x67, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x02, 0x48, 0x03, 0x52, 0x03, 0x67, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x6c,
	0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x48, 0x04, 0x52, 0x03, 0x6c, 0x74, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x48,
	0x05, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x6d, 0x61, 0x78,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x48, 0x06, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x88, 0x01, 0x01,
	0x12, 0x1f, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x07, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x88, 0x01,
	0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x65, 0x71, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x67, 0x74, 0x42,
	0x05, 0x0a, 0x03, 0x5f, 0x6c, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x67, 0x74, 0x65, 0x42, 0x06,
	0x0a, 0x04, 0x5f, 0x6c, 0x74, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6d, 0x69, 0x6e, 0x42, 0x06,
	0x0a, 0x04, 0x5f, 0x6d, 0x61, 0x78, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x22, 0x8b, 0x02, 0x0a, 0x0b, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x12, 0x13, 0x0a, 0x02, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x00, 0x52, 0x02, 0x65, 0x71, 0x88, 0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x67, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x01, 0x48, 0x01, 0x52, 0x02, 0x67, 0x74, 0x88, 0x01, 0x01, 0x12, 0x13, 0x0a,
	0x02, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x48, 0x02, 0x52, 0x02, 0x6c, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x67, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x03, 0x52, 0x03, 0x67, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x6c, 0x74, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x48, 0x04, 0x52, 0x03, 0x6c, 0x74, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x15, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x48, 0x05, 0x52,
	0x03, 0x6d, 0x69, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x01, 0x48, 0x06, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x88, 0x01, 0x01, 0x12, 0x1f,
	0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x07, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x88, 0x01, 0x01, 0x42,
	0x05, 0x0a, 0x03, 0x5f, 0x65, 0x71, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x67, 0x74, 0x42, 0x05, 0x0a,
	0x03, 0x5f, 0x6c, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x67, 0x74, 0x65, 0x42, 0x06, 0x0a, 0x04,
	0x5f, 0x6c, 0x74, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6d, 0x69, 0x6e, 0x42, 0x06, 0x0a, 0x04,
	0x5f, 0x6d, 0x61, 0x78, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x3a, 0x4d, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xb9, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x88, 0x01, 0x01,
	0x42, 0x40, 0x5a, 0x3e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70,
	0x69, 0x63, 0x61, 0x74, 0x7a, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e,
	0x2d, 0x67, 0x6f, 0x2d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x6b, 0x67,
	0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x3b, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_validate_validate_proto_rawDescOnce sync.Once
	file_validate_validate_proto_rawDescData = file_validate_validate_proto_rawDesc
)

func file_validate_validate_proto_rawDescGZIP() []byte {
	file_validate_validate_proto_rawDescOnce.Do(func() {
		file_validate_validate_proto_rawDescData = protoimpl.X.CompressGZIP(file_validate_validate_proto_rawDescData)
	})
	return file_validate_validate_proto_rawDescData
}

var file_validate_validate_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_validate_validate_proto_goTypes = []interface{}{
	(*FieldRules)(nil),                // 0: validate.FieldRules
	(*StringRules)(nil),               // 1: validate.StringRules
	(*BytesRules)(nil),                // 2: validate.BytesRules
	(*UInt32Rules)(nil),               // 3: validate.UInt32Rules
	(*Int32Rules)(nil),                // 4: validate.Int32Rules
	(*UInt64Rules)(nil),               // 5: validate.UInt64Rules
	(*Int64Rules)(nil),                // 6: validate.Int64Rules
	(*FloatRules)(nil),                // 7: validate.FloatRules
	(*DoubleRules)(nil),               // 8: validate.DoubleRules
	(*descriptorpb.FieldOptions)(nil), // 9: google.protobuf.FieldOptions
}
var file_validate_validate_proto_depIdxs = []int32{
	1,  // 0: validate.FieldRules.string:type_name -> validate.StringRules
	2,  // 1: validate.FieldRules.bytes:type_name -> validate.BytesRules
	3,  // 2: validate.FieldRules.uint32:type_name -> validate.UInt32Rules
	5,  // 3: validate.FieldRules.uint64:type_name -> validate.UInt64Rules
	4,  // 4: validate.FieldRules.int32:type_name -> validate.Int32Rules
	6,  // 5: validate.FieldRules.int64:type_name -> validate.Int64Rules
	7,  // 6: validate.FieldRules.float:type_name -> validate.FloatRules
	8,  // 7: validate.FieldRules.double:type_name -> validate.DoubleRules
	9,  // 8: validate.field:extendee -> google.protobuf.FieldOptions
	0,  // 9: validate.field:type_name -> validate.FieldRules
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	9,  // [9:10] is the sub-list for extension type_name
	8,  // [8:9] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_validate_validate_proto_init() }
func file_validate_validate_proto_init() {
	if File_validate_validate_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_validate_validate_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldRules); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_validate_validate_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringRules); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_validate_validate_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BytesRules); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_validate_validate_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UInt32Rules); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_validate_validate_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Int32Rules); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_validate_validate_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UInt64Rules); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_validate_validate_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Int64Rules); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_validate_validate_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FloatRules); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_validate_validate_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DoubleRules); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_validate_validate_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*FieldRules_String_)(nil),
		(*FieldRules_Bytes)(nil),
		(*FieldRules_Uint32)(nil),
		(*FieldRules_Uint64)(nil),
		(*FieldRules_Int32)(nil),
		(*FieldRules_Int64)(nil),
		(*FieldRules_Float)(nil),
		(*FieldRules_Double)(nil),
	}
	file_validate_validate_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_validate_validate_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_validate_validate_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_validate_validate_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_validate_validate_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_validate_validate_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_validate_validate_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_validate_validate_proto_msgTypes[8].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_validate_validate_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 1,
			NumServices:   0,
		},
		GoTypes:           file_validate_validate_proto_goTypes,
		DependencyIndexes: file_validate_validate_proto_depIdxs,
		MessageInfos:      file_validate_validate_proto_msgTypes,
		ExtensionInfos:    file_validate_validate_proto_extTypes,
	}.Build()
	File_validate_validate_proto = out.File
	file_validate_validate_proto_rawDesc = nil
	file_validate_validate_proto_goTypes = nil
	file_validate_validate_proto_depIdxs = nil
}
